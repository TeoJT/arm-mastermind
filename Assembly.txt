.global _start
_start:

main:
	// array initialization
	LDR R1,=array // get address of array
	LDR R2,=1 // initialize R1 to 1
	LDR R3,=21 // initialize R3 to 20
	
	//Run number generator subroutine.
	bl generateNumbers
	
	ldr r0, =#0       //Counter
	ldr r1, =#19      //Counter limit (when this value is reached the loop ends)
	ldr r2, =array   //i for array
	ldr r3, =sum     //i for sum
	ldr r4, =sum     //i-1 for sum
	sub r4, r4, #1
	
	//Run sum array generator subroutine.
	b sumNumbers
	
	
	
	






generateNumbers:
	STRB R2,[R1,#0] // STR’B’ store ‘byte’
	add R2, R2,#1 // Add 1 to R2
	add R1, R1,#1 // Add 1 to R1
	CMP R2,R3 // compare R2 and R3
	BNE generateNumbers // loop while not equal (R2 and R3)
	bx lr


sumNumbers:
	
	//Load bytes from array and previous sum byte
	ldrb r5, [r2, #0]
	ldrb r6, [r4, #0]
	
	//Add 'em together
	add r5, r5, r6
	
	//Write the byte to memory
	strb r5, [r3, #0]
	
	//Increment all the counters.
	add r0, r0, #1
	add r2, r2, #1
	add r3, r3, #1
	add r4, r4, #1
	
	//Compare r0 and r1. If they are equal, exit the loop.
	cmp r0, r1
	bne sumNumbers   //Keep looping if not equal
	
	//End of the code here.
	nop
	nop



//initialise array memory
.data
value: .byte 1
array: .skip 20 // Reserve 20 consecutive bytes of memory
 // (declare empty block of memory)
sum: .skip 20